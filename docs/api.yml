openapi: 3.0.3
info:
  title: Edenia
  version: 1.0.0
  description: application for chocolate ordering
servers:
  - url: http://localhost:8080
tags:
  - name: Order
  - name: Auth

paths:
  /token:
    post: 
      tags:
        - Auth
      summary: authenticate administrator
      description: this is about method of administrator authentication
      operationId: authentAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Success 
          content:
            application/json:
              schema: 
                allOf:
                  - $ref: '#/components/schemas/ResponseBody'
                  - properties:
                      body:
                        items:
                          type: string
                        example: "token"
        400:
          description: Bad request 
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/BadRequest"
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Forbidden"
        404:
          description: NotFound
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/NotFound"
        500:
          description: Server error
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/ServerError"

  /order:
    post: 
      tags:
        - Order
      summary: make an order 
      description: this enpoint is about making order 
      operationId: makeOrder
      requestBody:
        content:
          application/json:
            schema: 
              allOf:
                  - $ref: '#/components/schemas/ResponseBody'
                  - properties:
                      body:
                        $ref: '#/components/schemas/Order'
      responses:
        200:
          $ref: '#/components/responses/OrderSuccess'
        400:
          description: Bad request 
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/BadRequest"
        403:
          description: Forbidden
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Forbidden"
        404:
          description: NotFound
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/NotFound"
        500:
          description: Server error
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/ServerError"


components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
        clientName:
          type: string
        clientImageUrl:
          type: string
        clientEmail:
          type: string
        status:
          type: string
        idProduct:
          type: integer
        orderDate:
          type: string
          format: date 
        effectiveDate:
          type: string
          format: date
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    ResponseBody:
      allOf:
        - $ref: '#/components/schemas/Exception'
        - properties:
            body:
              type: object
    Exception:
      type: object
      properties:
        status:
          type: object
          properties:
            status_code:
              type: string
              example: 200
            message:
              type: string
              example: OK
        body: 
          type: object
    
    ResponseSuccessfully:
      allOf:
        - $ref: '#/components/schemas/Exception'
    
    BadRequest:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        status:
          status_code: 400
          message: BAD REQUEST 
        body: { }

    NotFound:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        status:
          status_code: 404
          message: NOT FOUND 
        body: { }
    
    Forbidden:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        status:
          status_code: 400
          message: FORBIDDEN 
        body: { }

    ServerError:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        status: 
          status_code: 500
          message: SERVOR ERROR 
        body: { }
  responses:
    OrderSuccess: 
      description: order successful 
      content: 
        application/json:
          schema:
            $ref: '#/components/schemas/Order'

